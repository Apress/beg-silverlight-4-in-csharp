//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace WCFService.StartingHandServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartingHands", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Web")]
    public partial class StartingHands : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Card1Field;
        
        private string Card2Field;
        
        private string NicknameField;
        
        private string NotesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Card1 {
            get {
                return this.Card1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Card1Field, value) != true)) {
                    this.Card1Field = value;
                    this.RaisePropertyChanged("Card1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Card2 {
            get {
                return this.Card2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Card2Field, value) != true)) {
                    this.Card2Field = value;
                    this.RaisePropertyChanged("Card2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="StartingHandServiceReference.StartingHandService")]
    public interface StartingHandService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:StartingHandService/GetHands", ReplyAction="urn:StartingHandService/GetHandsResponse")]
        System.IAsyncResult BeginGetHands(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> EndGetHands(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface StartingHandServiceChannel : WCFService.StartingHandServiceReference.StartingHandService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartingHandServiceClient : System.ServiceModel.ClientBase<WCFService.StartingHandServiceReference.StartingHandService>, WCFService.StartingHandServiceReference.StartingHandService {
        
        private BeginOperationDelegate onBeginGetHandsDelegate;
        
        private EndOperationDelegate onEndGetHandsDelegate;
        
        private System.Threading.SendOrPostCallback onGetHandsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StartingHandServiceClient() {
        }
        
        public StartingHandServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StartingHandServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StartingHandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StartingHandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetHandsCompletedEventArgs> GetHandsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WCFService.StartingHandServiceReference.StartingHandService.BeginGetHands(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHands(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> WCFService.StartingHandServiceReference.StartingHandService.EndGetHands(System.IAsyncResult result) {
            return base.Channel.EndGetHands(result);
        }
        
        private System.IAsyncResult OnBeginGetHands(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WCFService.StartingHandServiceReference.StartingHandService)(this)).BeginGetHands(callback, asyncState);
        }
        
        private object[] OnEndGetHands(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> retVal = ((WCFService.StartingHandServiceReference.StartingHandService)(this)).EndGetHands(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHandsCompleted(object state) {
            if ((this.GetHandsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHandsCompleted(this, new GetHandsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHandsAsync() {
            this.GetHandsAsync(null);
        }
        
        public void GetHandsAsync(object userState) {
            if ((this.onBeginGetHandsDelegate == null)) {
                this.onBeginGetHandsDelegate = new BeginOperationDelegate(this.OnBeginGetHands);
            }
            if ((this.onEndGetHandsDelegate == null)) {
                this.onEndGetHandsDelegate = new EndOperationDelegate(this.OnEndGetHands);
            }
            if ((this.onGetHandsCompletedDelegate == null)) {
                this.onGetHandsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHandsCompleted);
            }
            base.InvokeAsync(this.onBeginGetHandsDelegate, null, this.onEndGetHandsDelegate, this.onGetHandsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WCFService.StartingHandServiceReference.StartingHandService CreateChannel() {
            return new StartingHandServiceClientChannel(this);
        }
        
        private class StartingHandServiceClientChannel : ChannelBase<WCFService.StartingHandServiceReference.StartingHandService>, WCFService.StartingHandServiceReference.StartingHandService {
            
            public StartingHandServiceClientChannel(System.ServiceModel.ClientBase<WCFService.StartingHandServiceReference.StartingHandService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetHands(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetHands", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> EndGetHands(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands> _result = ((System.Collections.ObjectModel.ObservableCollection<WCFService.StartingHandServiceReference.StartingHands>)(base.EndInvoke("GetHands", _args, result)));
                return _result;
            }
        }
    }
}
